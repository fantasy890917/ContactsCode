package com.hqvibrator.improve;import java.io.File;import java.io.FileOutputStream;import java.util.ArrayList;import java.util.List;import android.app.Activity;import android.content.Context;import android.media.MediaPlayer;import android.os.Bundle;import android.os.Environment;import android.os.SystemClock;import android.view.View;import android.widget.AdapterView;import android.widget.Button;import android.widget.EditText;import android.widget.Spinner;import android.widget.Toast;import android.util.Log;import android.util.Xml;import org.xmlpull.v1.XmlSerializer;import android.view.Menu;import android.os.Vibrator;import com.android.dialer.R;import java.io.RandomAccessFile;/** * Dialog that comes up in response to various music-related VIEW intents. */public class HQVibratorMainActivity extends Activity implements View.OnClickListener {    private static final String TAG = "gongpeicai_audiotest";    private Toast mToast;    // private static final int VIBRATOR_MODE_CALL = 0;    // private static final int VIBRATOR_MODE_AATOUCH = 1;    // private static final int VIBRATOR_MODE_KEYMENU = 2;    // private static final int VIBRATOR_MODE_SMS = 3;    private static final int VIBRATOR_MODE_RINGING = 4;    private static final String mstrVibratorFile = "/hqvibratorimprove.txt";//xml    private Vibrator mVibrator;    private VibratorThread mVibratorThread;    private boolean mContinueVibrating;    private HQVibratorImprove mVibImprove[] = new HQVibratorImprove[5];    private Spinner musicSpinner;    private Spinner mVoltagespinner;    private Button mVibratorPlay;    private Button mVibratorStop;    private Button mVibratorUseTo;    private Button mVibratorSave;    private EditText multiInput1;    private EditText multiInput2;    private EditText multiInput3;    private int mCurrTypeId;    private int mCurrVoltageId;    // private int mCurrPatternMode;    private void InitAppUI() {        mVibratorPlay = (Button) findViewById(R.id.playpause);        mVibratorPlay.setOnClickListener(this);        mVibratorStop = (Button) findViewById(R.id.stop);        mVibratorStop.setOnClickListener(this);        mVibratorUseTo = (Button) findViewById(R.id.useto);        mVibratorUseTo.setOnClickListener(this);        mVibratorSave = (Button) findViewById(R.id.save);        mVibratorSave.setOnClickListener(this);        multiInput1 = (EditText) findViewById(R.id.multivibraotr1);        multiInput2 = (EditText) findViewById(R.id.multivibraotr2);        multiInput3 = (EditText) findViewById(R.id.multivibraotr3);    }    private void initVibratorData() {        // mVibImprove = new HQVibratorImprove[5];        Log.e(TAG, "initVibratorData  mVibImprove:" + mVibImprove);        for (int i = 0; i < mVibImprove.length; i++) {            mVibImprove[i] = new HQVibratorImprove();            mVibImprove[i].setmVoltage(7);            mVibImprove[i].setmVibPattern(new long[] { 0, 40, 20, 40 });        }    }    private void updateViewData() {        // stop vibratorThread        stopRingerVibrator();        mVibrator.cancel();        HQVibratorImprove vibImp = mVibImprove[mCurrTypeId];        for (int i = 0; i < 4; i++) {            if ((i + 4) == vibImp.getmVoltage()) {                mCurrVoltageId = i;                break;            }        }        mVoltagespinner.setSelection(mCurrVoltageId);        long[] pattern = vibImp.getmVibPattern();        if (pattern == null || pattern.length <= 0) {            showToast("vibrator pattern data error. the app will close!");            finish();            return;        }        multiInput1.setText(String.valueOf(pattern[1]));        multiInput2.setText(String.valueOf(pattern[2]));        multiInput3.setText(String.valueOf(pattern[3]));        if (mCurrTypeId == VIBRATOR_MODE_RINGING) {            multiInput3.setVisibility(View.GONE);            mVibratorStop.setVisibility(View.VISIBLE);        } else {            multiInput3.setVisibility(View.VISIBLE);            mVibratorStop.setVisibility(View.GONE);        }    }    private boolean saveCurrentVibData() {        long[] vibPattern = new long[4];        for (int i = 0; i < 4; i++) {            vibPattern[i] = 0;        }        vibPattern[1] = getEditTextData(multiInput1);        if (vibPattern[1] <= 0) {            showToast("Input vibrate time Error for first Input!");            return false;        }        vibPattern[2] = getEditTextData(multiInput2);        if ((mCurrTypeId == VIBRATOR_MODE_RINGING) && vibPattern[1] <= 0) {            showToast("Can not less than 0!");            return false;        }        vibPattern[3] = getEditTextData(multiInput3);        if (vibPattern[2] == 0 && vibPattern[3] != 0) {            showToast("When using an array for vibration, all input data cannot be empty!");            return false;        }        if (mCurrTypeId == VIBRATOR_MODE_RINGING) {            vibPattern[3] = 0;        }        HQVibratorImprove vibImp = new HQVibratorImprove();        vibImp.setmVoltage(mCurrVoltageId + 4);        vibImp.setmVibPattern(vibPattern);        mVibImprove[mCurrTypeId] = vibImp;        return true;    }    private long getEditTextData(EditText editor) {        if (editor == null) {            return 0;        }        String vibValue = editor.getText().toString().trim();        Log.e(TAG, "getEditTextData :  " + vibValue);        if (vibValue.isEmpty()) {            return 0;        }        long value = 0;        try {            value = Long.parseLong(vibValue);        } catch (Exception e) {            Log.e(TAG, "getEditTextData Exception:  " + e);        }        return value;    }    @Override    public void onClick(View arg0) {        int id = arg0.getId();        Log.e(TAG, "onclick button id:" + id);        switch (id) {        case R.id.playpause:            if (mVibratorThread != null && !mVibratorThread.mStop) {                stopRingerVibrator();                // showToast("Ringing mode Vibrator is working!");                return;            }            if (!saveCurrentVibData()) {                return;            }            HQVibratorImprove vibImp = mVibImprove[mCurrTypeId];            // showToast(vibImp.getmVibPattern().toString());            long[] pattern = vibImp.getmVibPattern();            if (mCurrTypeId == VIBRATOR_MODE_RINGING) {                startRingerVibrator(pattern[1], pattern[2], vibImp.getmVoltage());                return;            } else {                Log.d("vibrate_test","HQVibratorMainActivity.java --->> setVibrateMode(mode) --> mode == " + vibImp.getmVoltage());                            if (pattern[2] == 0) {                    mVibrator.setVibrateMode(vibImp.getmVoltage());                    mVibrator.vibrate(pattern[1]);                    return;                }                if (pattern[2] != 0 && pattern[1] != 0 && pattern[3] != 0) {                    mVibrator.setVibrateMode(vibImp.getmVoltage());                    mVibrator.vibrate(pattern, -1);                    return;                }            }            showToast(" the input data error! show we cannot play the vibrator!");            break;        case R.id.stop:            stopRingerVibrator();            break;        case R.id.useto:            break;        case R.id.save:            mVibratorSave.setEnabled(false);            createADXML();            mVibratorSave.setEnabled(true);            break;        default:            break;        }    }    public void onCreate(Bundle icicle) {        super.onCreate(icicle);        setContentView(R.layout.activity_main);        mVibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);        mCurrTypeId = 0;        mVibratorThread = null;        mCurrVoltageId = 0;        InitAppUI();        initVibratorData();        musicSpinner = (Spinner) findViewById(R.id.myspinner);        String[] mItems = getResources().getStringArray(R.array.spinnername);        // ArrayAdapter<String> _Adapter = new ArrayAdapter<String>(this,        // android.R.layout.simple_spinner_item, mItems);        List<String> audiolist = new ArrayList<String>();        for (int i = 0; i < mItems.length; i++) {            audiolist.add(mItems[i]);        }        HQVibratorSpinnerAdapter _Adapter = new HQVibratorSpinnerAdapter(this, audiolist);        musicSpinner.setAdapter(_Adapter);        musicSpinner.setOnItemSelectedListener(new Spinner.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                mCurrTypeId = position;                // Toast.makeText(MainActivity.this, " spanner txt :" +                // str, Toast.LENGTH_SHORT).show();                updateViewData();            }            @Override            public void onNothingSelected(AdapterView<?> parent) {            }        });        musicSpinner.setSelection(mCurrTypeId);        // mVoltagespinner        mVoltagespinner = (Spinner) findViewById(R.id.voltagespinner);        String[] mItems1 = getResources().getStringArray(R.array.voltagedata);        // ArrayAdapter<String> _Adapter = new ArrayAdapter<String>(this,        // android.R.layout.simple_spinner_item, mItems);        List<String> audiolist1 = new ArrayList<String>();        for (int i = 0; i < mItems1.length; i++) {            audiolist1.add(mItems1[i]);        }        HQVibratorSpinnerAdapter _Adapter1 = new HQVibratorSpinnerAdapter(this, audiolist1);        mVoltagespinner.setAdapter(_Adapter1);        mVoltagespinner.setOnItemSelectedListener(new Spinner.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                // String str =                // parent.getItemAtPosition(position).toString();                mCurrVoltageId = position;            }            @Override            public void onNothingSelected(AdapterView<?> parent) {            }        });        // INIT VIEW DATA        updateViewData();    }    @Override    public void onDestroy() {        stopRingerVibrator();        mVibrator.cancel();        super.onDestroy();    }    @Override    public void onUserLeaveHint() {        finish();        super.onUserLeaveHint();    }    public void onPrepared(MediaPlayer mp) {    }    public boolean onError(MediaPlayer mp, int what, int extra) {        Toast.makeText(this, R.string.playback_failed, Toast.LENGTH_SHORT).show();        finish();        return true;    }    /**     * M: stop to update the pregress bar when activity pausefor power saving     */    @Override    public void onPause() {        Log.d(TAG, "onPause for stop ProgressRefresher!");        super.onPause();    }    /**     * M: start the pregress bar update.     */    @Override    public void onResume() {        super.onResume();        stopRingerVibrator();        mVibrator.cancel();        Log.d(TAG, "onResume for start ProgressRefresher!");    }    /**     * M: Don't respond to quick search request in AudioPreview     */    @Override    public boolean onSearchRequested() {        return false;    }    /**     * M: Show the given text to screen.     *     * @param toastText     *            Need show text.     */    private void showToast(CharSequence toastText) {        if (mToast == null) {            mToast = Toast.makeText(getApplicationContext(), toastText, Toast.LENGTH_SHORT);        }        mToast.setText(toastText);        mToast.show();    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        super.onCreateOptionsMenu(menu);        return true;    }    @Override    public boolean onPrepareOptionsMenu(Menu menu) {        return false;    }    private class VibratorThread extends Thread {        boolean mStop = false;        public long startTime = 0;        public long stopTime = 0;        public int vibMode = 7;        public void setVibMode(int mode) {            vibMode = mode;        }        public void run() {            Log.d(TAG, "RingerVibrator mVibratorThread  mContinueVibrating:" + mContinueVibrating                    + "  mStop:" + mStop);                mVibrator.setVibrateMode(vibMode);            Log.d("vibrate_test","HQVibratorMainActivity.java --->> run setVibrateMode(mode) --> mode == " + vibMode);				            while (mContinueVibrating && !mStop) {                mVibrator.vibrate(startTime);                SystemClock.sleep(startTime + stopTime);            }        }    }    private void startRingerVibrator(long start, long stop, int mode) {        if (start < 10 || stop < 10) {            showToast("the vibrator time and stop time is too small!");            return;        }        if (mVibratorThread == null) {            mVibratorThread = new VibratorThread();        }        mVibratorThread.startTime = start;        mVibratorThread.stopTime = stop;        mVibratorThread.setVibMode(mode);        mContinueVibrating = true;        Log.d(TAG, "startRingerVibrator - starting vibrator...");        mVibratorThread.start();    }    private void stopRingerVibrator() {        Log.d(TAG, "stopRingerVibrator - stop vibrator... mVibratorThread:" + mVibratorThread);        if (mVibratorThread != null) {            mContinueVibrating = false;            mVibratorThread.mStop = true;            mVibratorThread = null;        }    }    public boolean createADXML() {        boolean bFlag = false;        FileOutputStream fileos = null;        String[] mItems = getResources().getStringArray(R.array.spinnername);        String localDir = Environment.getExternalStorageDirectory().getAbsolutePath();        Log.e(TAG, "createADXML localDir: " + localDir);        File newXmlFile = new File(localDir + mstrVibratorFile);        try {            if (newXmlFile.exists()) {                bFlag = newXmlFile.delete();            } else {                bFlag = true;            }            if (bFlag) {                Log.e(TAG, "createADXML newXmlFile: " + newXmlFile.getAbsolutePath());                if (newXmlFile.createNewFile()){                    StringBuffer strBuffer = new StringBuffer();                    for (int index = 0; index < mVibImprove.length; index++) {                        HQVibratorImprove vib = mVibImprove[index];                        strBuffer.append(mItems[index]);                        strBuffer.append("--> voltage: ");                        strBuffer.append(vib.getmVoltage());                        strBuffer.append("    vibrator: ");                        for (int i = 0; i < vib.getmVibPattern().length; i++) {                            strBuffer.append(vib.getmVibPattern()[i]);                            if (i != (vib.getmVibPattern().length - 1)) {                                strBuffer.append(",");                            }                        }                        strBuffer.append("\n");                    }                    RandomAccessFile raf = new RandomAccessFile(newXmlFile, "rw");//                    raf.seek(file.length());                    raf.write(strBuffer.toString().getBytes());                    raf.close();                    // show file write completed.                    showToast(" Save Success! filePath: " + newXmlFile.getAbsolutePath());                    return true;                }/*                if (newXmlFile.createNewFile()) {                    fileos = new FileOutputStream(newXmlFile);                    StringBuffer buffer = new StringBuffer();                    // we create a XmlSerializer in order to write xml data                    XmlSerializer serializer = Xml.newSerializer();                    // we set the FileOutputStream as output for the serializer,                    // using UTF-8 encoding                    serializer.setOutput(fileos, "UTF-8");                    serializer.startDocument("UTF-8", null);                    // start a tag called "root tag vibrator"                    serializer.startTag(null, "Resource");                    for (int index = 0; index < mVibImprove.length; index++) {                        HQVibratorImprove vib = mVibImprove[index];                        serializer.startTag(null, "vibrator");                        serializer.attribute(null, "name", mItems[index]);                        // voltage                        serializer.startTag(null, "voltage");                        serializer.text(String.valueOf(vib.getmVoltage()));                        serializer.endTag(null, "voltage");                        // vibrator pattern                        serializer.startTag(null, "pattern");                        if (buffer.length() > 0) {                            buffer.delete(0, buffer.length());                        }                        for (int i = 0; i < vib.getmVibPattern().length; i++) {                            buffer.append(vib.getmVibPattern()[i]);                            if (i != (vib.getmVibPattern().length - 1)) {                                buffer.append(",");                            }                        }                        serializer.text(buffer.toString());                        serializer.endTag(null, "pattern");                        serializer.endTag(null, "vibrator");                    }                    // end tag                    serializer.endTag(null, "Resource");                    serializer.endDocument();                    // write xml data into the FileOutputStream                    serializer.flush();                    // finally we close the file stream                    fileos.close();                    // show file write completed.                    showToast(" Save Success! filePath: " + newXmlFile.getAbsolutePath());                }*/            }        } catch (Exception e) {            Log.e(TAG, "write xml case Error: " + e);        }        return bFlag;    }}